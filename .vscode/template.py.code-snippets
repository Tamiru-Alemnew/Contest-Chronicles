{
	"input Template": {
		"scope": "python",
		"prefix": "template",
		"body": [
			"import sys; from collections import Counter, defaultdict, deque; from bisect import bisect_right , bisect_left ; from math import inf; from math import ceil ; import math;from heapq import *;ip = lambda: int(sys.stdin.readline().strip()); lip = lambda: list(map(int, sys.stdin.readline().strip().split())); tip = lambda: tuple(map(int, sys.stdin.readline().strip().split())); lcp = lambda: sys.stdin.readline().strip().split(); lsip = lambda: list(map(int, sys.stdin.readline().strip())); cip = lambda: list(sys.stdin.readline().strip()); sip = lambda: sys.stdin.readline().strip() ;even = lambda x: x & 1 == 0;",
		],
		"description": "template for contests"
	},

	"inbound":{
		"scope": "python",
		"prefix": "inbound",
		"body": [
			"def inbound(row , col):",
			"    return (0<= row < len(grid)) and (0<= col < len(grid[0]))",
		],
	} ,
	"recursion":{
		"scope": "python",
		"prefix": "recursion",
		"body": [
			"import threading",
			"from sys import stdin, stdout, setrecursionlimit",
			"from collections import defaultdict",

			"setrecursionlimit(1 << 30)",
			"threading.stack_size(1 << 27)",

			"def main():",
			"    # Enter your code here",
			"    pass",

			"main_thread = threading.Thread(target=main)",
			"main_thread.start()",
			"main_thread.join()",
		],
	} ,
	"directions":{
		"scope": "python",
		"prefix": "directions",
		"body": [
			"directions = [(1 , 0 ) , (0 , 1) , (-1 , 0) , (0 , -1) , (1 , -1) , (-1 , 1) , (1 , 1) , (-1 , -1)]",
		],
	} ,

	"bfs":{
		"scope": "python",
		"prefix": "bfs grid",
		"body": [
			"def bfs(row , col):",
			"   visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]",
			"    q = deque([(row , col)])",
			"    visited[row][col] = True",
			"    while q:",
			"        for _ in range(len(q)):",
			"            row , col = q.popleft()",
			"            for dr , dc in directions:",
			"                newRow , newCol = row + dr , col + dc",
			"                if inbound(newRow , newCol) and not visited[newRow][newCol]:",
			"                    q.append((newRow , newCol))",
			"                    visited[newRow][newCol] = True",
		],
	} ,
"dfs grid" :{
	"scope": "python",
	"prefix": "dfs grid",
	"body": [
		"def dfs(row , col):",
		"    if not inbound(row , col) or visited[row][col]:",
		"        return",
		"    visited[row][col] = True",
		"    for dr , dc in directions:",
		"        newRow , newCol = row + dr , col + dc",
		"        dfs(newRow , newCol)",
	],
} ,
"dfs graph" :{
	"scope": "python",
	"prefix": "dfs",
	"body": [
		"def dfs(node):",
		"    if visited[node]:",
		"        return",
		"    visited[node] = True",
		"    for neighbor in graph[node]:",
		"        dfs(neighbor)",
	],
} ,
// dfs iteration graph (not grid)
"dfs iterative":{
	"scope": "python",
	"prefix": "dfs iter" ,
	"body":[
        "stk = [src]",
        "vis = set([src])",
        "while stk:",
        "   node = stk.pop()",
        "if node == dest:",
        "    return True",
        "for nbr in graph[node]:",
        "    if nbr not in vis:",
        "        stk.append(nbr)",
        "        vis.add(nbr)",
	],
},

"union find":{
	"scope": "python",
	"prefix": "union find",
	"body": [
		"class UnionFind:",
		"    def __init__(self , n):",
		"        self.parent = [i for i in range(n)]",
		"        self.rank = [0 for _ in range(n)]",
		"    def find(self , node):",
		"        if self.parent[node] != node:",
		"            self.parent[node] = self.find(self.parent[node])",
		"        return self.parent[node]",
		"    def union(self , node1 , node2):",
		"        parent1 = self.find(node1)",
		"        parent2 = self.find(node2)",
		"        if parent1 == parent2:",
		"            return",
		"        if self.rank[parent1] > self.rank[parent2]:",
		"            self.parent[parent2] = parent1",
		"        elif self.rank[parent1] < self.rank[parent2]:",
		"            self.parent[parent1] = parent2",
		"        else:",
		"            self.parent[parent1] = parent2",
		"            self.rank[parent2] += 1",
	],
} ,

"seive" :{
    "scope": "python",
    "prefix": "seive",
    "body": [
        "def sieve(n):",
        "    is_prime = [True] * (n + 1)",
        "    p = 2",
        "    while p * p <= n:",
        "        if is_prime[p]:",
        "            for i in range(p * p, n + 1, p):",
        "                is_prime[i] = False",
        "        p += 1",
        "    return [p for p in range(2, n+1) if is_prime[p]]"
    ]
},

"trie" :{
	"scope": "python",
	"prefix": "trie",
	"body": [
		"def insert(word):",
		"    node = trie",
		"    for char in word:",
		"        if char not in node:",
		"            node[char] = {}",
		"        node = node[char]",
		"    node['#'] = True",
		"def search(word):",
		"    node = trie",
		"    for char in word:",
		"        if char not in node:",
		"            return False",
		"        node = node[char]",
		"    return '#' in node",
		"def startsWith(prefix):",
		"    node = trie",
		"    for char in prefix:",
		"        if char not in node:",
		"            return False",
		"        node = node[char]",
		"    return True"

	]
},

"bipartite": {
    "prefix": "bipartite",
    "body": [
        "from collections import deque",
        "",
        "def is_bipartite(graph, n):",
        "    colors = [-1] * n",
        "",
        "    for start in range(n):",
        "        if colors[start] == -1:",  
        "            queue = deque([start])",
        "            colors[start] = 1",
        "",
        "            while queue:",
        "                node = queue.popleft()",
        "",
        "                for neighbor in graph[node]:",
        "",
        "                    if colors[neighbor] == -1:",  
        "                        colors[neighbor] = 1 if colors[node] == 2 else 2",
        "                        queue.append(neighbor)",
        "                    elif colors[neighbor] == colors[node]:",  
        "                        return False, colors",  
        "",
        "    return True, colors"
    ],
    "description": "Check if a graph is bipartite"
},

"KMP Algorithm": {
	"prefix": "kmp",
	"body": [
		"def build_lps(pattern):",
		"    lps = [0] * len(pattern)",
		"    length = 0  # Length of previous longest prefix suffix",
		"    i = 1",
		"",
		"    while i < len(pattern):",
		"        if pattern[i] == pattern[length]:",
		"            length += 1",
		"            lps[i] = length",
		"            i += 1",
		"        else:",
		"            if length != 0:",
		"                length = lps[length - 1]",
		"            else:",
		"                lps[i] = 0",
		"                i += 1",
		"    return lps",
		"",
		"def kmp_search(text, pattern):",
		"    lps = build_lps(pattern)",
		"    i = j = 0  # i for text, j for pattern",
		"    occurrences = []",
		"",
		"    while i < len(text):",
		"        if text[i] == pattern[j]:",
		"            i += 1",
		"            j += 1",
		"",
		"        if j == len(pattern):",
		"            occurrences.append(i - j)",
		"            j = lps[j - 1]",
		"",
		"        elif i < len(text) and text[i] != pattern[j]:",
		"            if j != 0:",
		"                j = lps[j - 1]",
		"            else:",
		"                i += 1",
		"    return occurrences"
	],
	"description": "KMP (Knuth-Morris-Pratt) algorithm for pattern searching"
}
}

